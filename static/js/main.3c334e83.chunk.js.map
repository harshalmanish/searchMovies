{"version":3,"sources":["components/image-unavailable-icon-260nw-1157415967.webp","components/unavailable-image.jpg","components/Input.js","components/Modal.js","components/CardItem.js","components/Card.js","components/App.js","serviceWorker.js","index.js","loader.module.css"],"names":["module","exports","Input","props","useState","searchValue","setSearchValue","callSearchFunction","e","preventDefault","search","id","className","style","textAlign","marginBottom","value","type","placeholder","aria-label","onChange","target","onSubmit","aria-describedby","onClick","Moodal","poster","movie","poster_path","Image","Modal","size","aria-labelledby","centered","Header","closeButton","color","Title","original_title","release_date","Body","Container","loading","loadstyle","loader","Row","Col","src","width","xs","overview","things","genres","length","map","item","index","name","Footer","imdburl","Button","href","onHide","CardItem","showModal","setshowModal","Fetchmoviedata","show","Card","movies","setThings","setLoading","MOVIE_URL","fetch","then","response","json","jsonResponse","console","log","imdb_id","catch","error","App","setMovies","errorMessage","setErrorMessage","API_KEY","MOVIE_API_URL","useEffect","localStorage","getItem","JSON","parse","results","errors","setItem","stringify","marginTop","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3c334e83.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/image-unavailable-icon-260nw-1157415967.e7d77243.webp\";","module.exports = __webpack_public_path__ + \"static/media/unavailable-image.2f9bba45.jpg\";","import React, {useState} from \"react\";\r\n\r\nconst Input = (props) => {\r\n    const [searchValue, setSearchValue] = useState(\"\");\r\n    \r\n    const handleSearchInputChanges = (e) => {\r\n      setSearchValue(e.target.value);\r\n    }\r\n  \r\n    const resetInputField = () => {\r\n      setSearchValue(\"\")\r\n    }\r\n  \r\n    const callSearchFunction = (e) => {\r\n      e.preventDefault();\r\n      props.search(searchValue);\r\n      resetInputField();\r\n    }\r\n    return(\r\n        <div id=\"searchDiv\" className=\"bg-dark\">\r\n            <h1 style={{textAlign:\"center\", marginBottom:\"20px\"}}>Search for any movie</h1>\r\n            <div className=\"input-group mb-3\">\r\n                  {/* <from> */}\r\n                  <input value={searchValue} \r\n                    type=\"text\" \r\n                    className=\"form-control\"\r\n                    placeholder=\"Search\" \r\n                    aria-label=\"Username\" \r\n                    onChange={handleSearchInputChanges}   \r\n                    onSubmit={callSearchFunction}               \r\n                    aria-describedby=\"basic-addon1\" id=\"movieInput\"/>\r\n                    <input type=\"button\" value=\"Search\" className=\"btn btn-primary\" onClick={callSearchFunction}></input>\r\n                  {/* </from> */}\r\n            </div>\r\n\t    </div>\r\n    );\r\n};\r\n\r\nexport default Input;\r\n","import React,{useState,useEffect} from \"react\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Image from \"./image-unavailable-icon-260nw-1157415967.webp\";\r\nimport loadstyle from \"../loader.module.css\";\r\n\r\nconst Moodal = (props) =>{\r\n  // const [imdburl, setimdbUrl] = useState(\"#\");\r\n  // const [genres, setGenres] = useState([]);\r\n  const poster = props.movie.poster_path==null ? Image : `https://image.tmdb.org/t/p/w185${props.movie.poster_path}`;\r\n  // const MOVIE_URL = `https://api.themoviedb.org/3/movie/${props.movie.id}?api_key=21ae4e075ad23b2fddaf0870594cb704`;\r\n\r\n  // useEffect(() => {\r\n  //   fetch(MOVIE_URL)\r\n  //     .then(response => response.json())\r\n  //     .then(jsonResponse => {\r\n  //       console.log(jsonResponse);\r\n  //       setGenres(jsonResponse.genres);\r\n  //       setimdbUrl(`https://www.imdb.com/title/${jsonResponse.imdb_id}`);\r\n  //     })\r\n  // }, []);\r\n\r\n    return(\r\n        <Modal\r\n      {...props}\r\n      size=\"lg\"\r\n      aria-labelledby=\"contained-modal-title-vcenter\"\r\n      centered\r\n    >\r\n      <Modal.Header closeButton className=\"bg-dark\" style={{color:\"white\"}}>\r\n        <Modal.Title id=\"contained-modal-title-vcenter\">\r\n          {props.movie.original_title}\r\n          {props.movie.release_date===\"\" || props.movie.release_date===null ? null:(\r\n          <p>Release Date : {props.movie.release_date}</p>\r\n          )}\r\n        </Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body className=\"bg-dark\">\r\n      <Container>\r\n        {props.loading ? (\r\n          <div className={loadstyle.loader}></div>\r\n        ) : (\r\n          <Row className=\"show-grid\">\r\n            <Col>\r\n              <img src={poster} style={{width:\"13rem\"}}></img>\r\n            </Col>\r\n            <Col xs={8}>\r\n              <p style={{color:\"white\"}}>{props.movie.overview}</p>\r\n              <p style={{color:\"white\"}}> {props.things.genres.length>0? \"Genres : \" : null }\r\n                {props.things.genres.map((item,index)=>{\r\n                  if(index<props.things.genres.length-1)\r\n                  return(` ${item.name},`);\r\n                  else\r\n                  return(` ${item.name}`);\r\n                })}\r\n              </p>\r\n            </Col>\r\n          </Row>\r\n        ) }\r\n        </Container>\r\n      </Modal.Body>\r\n      <Modal.Footer className=\"bg-dark\">\r\n        {props.loading ? (null) : props.things.imdburl===null ? null : (\r\n        <Button href={props.things.imdburl}>Go to IMDB Page</Button>\r\n        )}}\r\n        \r\n        <Button onClick={props.onHide}>Close</Button>\r\n      </Modal.Footer>\r\n    </Modal>\r\n    );\r\n}\r\n\r\nexport default Moodal;","import React,{useState} from \"react\";\r\nimport Modal from \"./Modal\";\r\nimport Image from \"./unavailable-image.jpg\"\r\n\r\nconst CardItem = (props) =>{\r\n\tconst [showModal, setshowModal] = useState(false);\r\n\tconst onClick = (e) =>{\r\n\t\tprops.Fetchmoviedata(props.movie);\r\n\t\tsetshowModal(true);\r\n\t}\r\n\r\n\tconst poster = props.movie.poster_path==null ? Image : `https://image.tmdb.org/t/p/w342${props.movie.poster_path}`\r\n    return(\r\n\t\t<>\r\n        <div className=\"card_container col-md-3\" onClick={onClick}>\r\n\t\t\t<div className=\"card mt-3 bg-dark\" style={{width: \"18rem\"}}>\r\n  \t\t\t\t<img src={poster} className=\"card-img-top\"/>\r\n  \t\t\t\t<div className=\"card-body\">\r\n   \t\t\t\t\t<h5 className=\"card-title\" style={{color:\"white\"}}>{props.movie.original_title}</h5>\r\n    \t\t\t\t \r\n\t\t\t\t\t   {/* <button type=\"button\" className=\"btn btn-primary\" onClick={()=>setshowModal(true)}>See Details</button> */}\r\n  \t\t\t\t</div>\r\n\t\t\t</div>\r\n\t    </div>\r\n\t\t<Modal\r\n\t\t\tmovie={props.movie} \r\n\t\t\tthings={props.things}\r\n\t\t\tshow={showModal}\r\n\t\t\tonHide={() => setshowModal(false)}\r\n\t\t\tloading={props.loading}\r\n\t\t></Modal>\r\n\t\t</>\r\n    );\r\n}\r\n\r\nexport default CardItem;","import React,{useState, useEffect} from \"react\";\r\nimport CardItem from \"./CardItem\";\r\n\r\nconst Card = ({movies}) => {\r\n    const [things, setThings] = useState({imdburl:\"\", genres:[]});\r\n    const [loading, setLoading] = useState(true);\r\n\r\n    // useEffect(()=>{\r\n    //     fetch(`https://api.themoviedb.org/3/movie/50839?api_key=21ae4e075ad23b2fddaf0870594cb704`)\r\n    //     .then(response => response.json())\r\n    //     .then(jsonResponse => {\r\n    //         console.log(jsonResponse);\r\n    //         if(jsonResponse.imdb_id===null)\r\n    //         setThings({imdburl:null, genres:jsonResponse.genres})\r\n    //         else\r\n    //         setThings({imdburl:`https://www.imdb.com/title/${jsonResponse.imdb_id}`, genres:jsonResponse.genres});\r\n    // })\r\n    // },[])\r\n    \r\n    const Fetchmoviedata = movie =>{\r\n        setLoading(true);\r\n        const MOVIE_URL = `https://api.themoviedb.org/3/movie/${movie.id}?api_key=21ae4e075ad23b2fddaf0870594cb704`;\r\n\r\n\r\n            fetch(MOVIE_URL)\r\n            .then(response => response.json())\r\n            .then(jsonResponse => {\r\n                setLoading(false);\r\n                console.log(jsonResponse);\r\n                if(jsonResponse.imdb_id===null || jsonResponse.imdb_id===\"\")\r\n                setThings({imdburl:null, genres:jsonResponse.genres})\r\n                else\r\n                setThings({imdburl:`https://www.imdb.com/title/${jsonResponse.imdb_id}`, genres:jsonResponse.genres});\r\n            })\r\n            .catch(error => {\r\n                // setLoading(false);\r\n                setThings({imdburl:null, genres:[]})\r\n            })        \r\n\r\n    }\r\n    \r\n    return movies.map((movie) => {\r\n        return(\r\n            <CardItem Fetchmoviedata={Fetchmoviedata}\r\n                      movie={movie}\r\n                      things={things}\r\n                      loading={loading}/>\r\n        );\r\n    })\r\n}\r\n\r\nexport default Card;","import React, {useState, useEffect} from \"react\";\nimport Input from \"./Input\";\nimport Card from \"./Card\";\nimport loadstyle from \"../loader.module.css\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n  const [movies, setMovies] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [errorMessage, setErrorMessage] = useState(null);\n\n  const API_KEY = \"21ae4e075ad23b2fddaf0870594cb704\";\n  const MOVIE_API_URL = `https://api.themoviedb.org/3/search/movie?api_key=${API_KEY}&query=man`;\n\n  useEffect(() => {\n    fetch(MOVIE_API_URL)\n      .then(response => response.json())\n      .then(jsonResponse => {\n        setLoading(false);\n        console.log(jsonResponse);\n        if(localStorage.getItem(\"document\"))\n        setMovies(JSON.parse(localStorage.getItem(\"document\")).results);\n        else\n        setMovies(jsonResponse.results);\n      })\n      .catch(error => {\n        setErrorMessage(\"Please check network connection\");\n      });\n  }, []);\n\n  const search = searchValue => {\n    setLoading(true);\n    setErrorMessage(null);\n\n    fetch(`https://api.themoviedb.org/3/search/movie?api_key=${API_KEY}&query=${searchValue}`)\n    .then(response => response.json())\n    .then(jsonResponse => {\n      console.log(jsonResponse);\n      if(jsonResponse.errors){\n        setLoading(false);\n        setErrorMessage(\"Search criteria not entered\");  \n      }else if(jsonResponse.results.length===0){\n        setLoading(false);\n        setErrorMessage(\"Movie not found\");\n      }else{\n        setLoading(false);\n        localStorage.setItem(\"document\", JSON.stringify(jsonResponse));\n        setMovies(jsonResponse.results);\n      }\n    })\n    .catch(error => {\n      setLoading(false);\n      setErrorMessage(\"No network connection\");\n    });\n  }\n  \n  // setMovies(JSON.parse(localStorage.getItem(\"document\")));\n\n  return (\n    <>\n    <Input search = {search}/>\n    {loading && !errorMessage ? (\n    <div className={loadstyle.loader}></div>\n         ) : errorMessage ? (\n          <div className=\"errorMessage\" style={{color:\"white\", textAlign:\"center\", marginTop:\"10rem\"}}>\n            <h1>Error : {errorMessage} :(</h1>\n            </div>\n        ) : (\n          <div className=\"row\" style={{color: \"black\"}}>\n            <Card movies={movies}/>\n          </div>\n        )}\n    </>\n  );\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loader\":\"loader_loader__3SNd7\",\"spin\":\"loader_spin__23ojR\"};"],"sourceRoot":""}